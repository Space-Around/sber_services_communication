version: '3'

x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-04-12T06-55-35Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  # environment:
    # MINIO_ROOT_USER: minioadmin
    # MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

#  postgres:
#      image: postgres
#      volumes:
#        - postgres_data:/var/lib/postgresql/data
#      environment:
#        POSTGRES_DB: keycloak
#        POSTGRES_USER: keycloak
#        POSTGRES_PASSWORD: password

#  keycloak:
#      image: quay.io/keycloak/keycloak:legacy
#      environment:
#        DB_VENDOR: POSTGRES
#        DB_ADDR: postgres
#        DB_DATABASE: keycloak
#        DB_USER: keycloak
#        DB_SCHEMA: public
#        DB_PASSWORD: password
#        KEYCLOAK_USER: admin
#        KEYCLOAK_PASSWORD: Pa55w0rd
#        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
#        #JDBC_PARAMS: "ssl=true"
#      ports:
#        - 8080:8080
#      depends_on:
#        - postgres
  proxy:
    build: .
    command: python proxy_server.py
    ports:
      - "5000:5000"

#networks:
#  bridge:
#    external: true

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
#  postgres_data:
#      driver: local
